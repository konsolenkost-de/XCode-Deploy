name: 'XCode-Deploy'
description: 'Archive, Export, and Upload a build to App Store Connect (TestFlight)'
author: 'Vincent Frascello'
branding: 
  icon: 'upload-cloud'
  color: 'yellow'
  
inputs:
  working-directory:
    description: 'The directory in which the app files are located'
    required: false
    default: './'
  xcode-version: 
    description: 'The version of XCode to use. Defaults to the latest stable version.'
    required: false
    default: 'latest-stable'
  configuration: 
    description: 'Configuration (default: Release)'
    required: true
    default: 'Release'
  scheme: 
    description: 'Leave blank and Action will search for default scheme.'
    required: false
    default: ''
  path-to-export-options:
    description: 'Relative path and filename to ExportOptions.plist'
    required: true
    default: 'ExportOptions.plist'
  update-build: 
    description: 'Sets Build Number to # of commits.'
    type: boolean
    required: true
    default: true
  install-pods: 
    description: 'Run Pod Install'
    type: boolean
    required: true
    default: false
  resolve-package-dependencies: 
    description: 'Resolve Package Dependencies'
    type: boolean
    required: true
    default: false
  distribution-certificate-p12:
    description: 'base64 representation of the distribution certificate.'
    required: true
  distribution-certificate-password:
    description: 'password to unlock the distribution certificate.'
    required: true
  app-store-provisioning-profile:
    description: 'base64 representation of the provisioning profile.'
    required: true
  app-store-provisioning-profile-name:
    description: 'name of the provisioning profile.'
    required: true
  auth-key-id:
    description: 'App Store Connect API Auth Key ID.'
    required: true
  auth-key-issuer-id:
    description: 'App Store Connect API Issuer ID.'
    required: true
  auth-key-p8:
    description: 'base64 representation of the App Store Connect AuthKey.'
    required: true
  development-team:
    description: 'Development Team ID to use for code signing.'
    required: true

runs: 
  using: 'composite'
  steps:
    - name: Determine File To Build
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "[XCode-Deploy]: Determining file to build..."
        if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" \
        && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; \
        else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
        file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
        echo "TYPE=$filetype_parameter" >> $GITHUB_ENV
        echo "FILE_TO_BUILD=$file_to_build" >> $GITHUB_ENV
        echo "PROJECT_NAME=$(echo "$file_to_build" | cut -f 1 -d '.')" >> $GITHUB_ENV
        echo "CWD=$(pwd)" >> $GITHUB_ENV
    - name: Setup Pods
      working-directory: ${{ inputs.working-directory }}
      if: inputs.install-pods == 'true'
      shell: bash
      run: |
        echo "[XCode-Deploy]: Installing Pods..."
        pod install
    - name: Resolve Package Dependencies
      working-directory: ${{ inputs.working-directory }}
      if: inputs.resolve-package-dependencies == 'true'
      shell: bash
      run: |
        echo "[XCode-Deploy]: Resolving Package Dependencies..."
        xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .
    - name: Setup Scheme
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "[XCode-Deploy]: Searching for default Scheme..."
        if [ "${{ inputs.scheme }}" == "" ]; then
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $scheme | cat >scheme
          echo "[XCode-Deploy]: Using default scheme: $scheme..."
        else 
          echo "[XCode-Deploy]: Using provided Scheme: ${{ inputs.scheme }}"
          scheme="${{ inputs.scheme }}"
        fi
        echo "SCHEME=$scheme" >> $GITHUB_ENV
    - name: Import Certificates
      uses: apple-actions/import-codesign-certs@v1
      id: codesign
      with:
        p12-file-base64: ${{ inputs.distribution-certificate-p12 }}
        p12-password: ${{ inputs.distribution-certificate-password }}
        keychain: codesign
    - name: Install App Store Profile
      uses: akiojin/install-provisioning-profile-github-action@v1.0
      with:
        base64: ${{ inputs.app-store-provisioning-profile }}
    - name: Select Xcode
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: ${{ inputs.xcode-version }}
    - name: Increment Build Number
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      if: inputs.update-build == 'true'
      run: |
          echo "[XCode-Deploy]: Updating Build Number to commit depth..."
          count=`git rev-list --count HEAD`
          xcrun agvtool new-version -all $count
    - name: Build and Archive
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        xcodebuild \
        -${{ env.TYPE }} "${{ env.FILE_TO_BUILD }}" \
        -scheme "${{ env.SCHEME }}" \
        -destination generic/platform=iOS \
        -configuration ${{ inputs.configuration }} \
        -sdk iphoneos \
        -derivedDataPath "build/derivedData" \
        -archivePath "${{ env.PROJECT_NAME }}.xcarchive" \
        CODE_SIGN_STYLE="Manual" \
        DEVELOPMENT_TEAM="${{ inputs.development-team }}" \
        CODE_SIGN_IDENTITY="iPhone Distribution" \
        PROVISIONING_PROFILE_SPECIFIER="${{ inputs.app-store-provisioning-profile-name }}" \
        archive
    - name: Get App Store Connect API Key
      uses: timheuer/base64-to-file@v1.2.4
      with:
        fileName: AuthKey_${{ inputs.auth-key-id }}.p8
        fileDir: ${{ env.CWD }}/private_keys
        encodedString: ${{ inputs.auth-key-p8 }}
    - name: Export Xcode archive
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "[XCode-Deploy]: Exporting archive using xcodebuild..."
        xcodebuild -exportArchive -verbose \
        -sdk iphoneos \
        -archivePath "${{ env.PROJECT_NAME }}.xcarchive"  \
        -exportOptionsPlist "${{ inputs.path-to-export-options }}" \
        -exportPath "." \
        -authenticationKeyIssuerID "${{ inputs.auth-key-issuer-id }}" \
        -authenticationKeyID "${{ inputs.auth-key-id }}" \
        -authenticationKeyPath "${{ env.CWD }}/private_keys/AuthKey_${{ inputs.auth-key-id }}.p8"
    - name: Upload to App Store Connect
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "[XCode-Deploy]: Uploading archive using altool..."
        xcrun altool --upload-app -f "${{ env.PROJECT_NAME }}.ipa" -t iOS \
        --apiIssuer "${{ inputs.auth-key-issuer-id }}" --apiKey "${{ inputs.auth-key-id }}"
    - name: Cleanup
      shell: bash
      run: |
        echo "[XCode-Deploy]: Removing Keychain and private_keys folder..."
        security delete-keychain codesign.keychain
        rm  -rf "${{ env.CWD }}/private_keys" || true
